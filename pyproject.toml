[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
    "matplotlib",
    "numpy",
    "pandas",
    "uproot",
]
description = "Python helper tools for the Pawian framework"
dynamic = ["version"]
keywords = [
    "HEP",
    "PWA",
    "amplitude analysis",
    "partial wave analysis",
    "particle physics",
    "particles",
    "physics",
]
license = {text = "GPLv3 or later"}
name = "pawian-tools"
requires-python = ">=3.9"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
Changelog = "https://github.com/RUB-EP1/pawian-tools/releases"
Documentation = "http://rub-ep1.github.io/pawian-tools"
Source = "https://github.com/RUB-EP1/pawian-tools"
Tracker = "https://github.com/RUB-EP1/pawian-tools/issues"

[dependency-groups]
dev = [
    "nbmake",
    "ruff",
    "sphinx-autobuild",
    {include-group = "doc"},
    {include-group = "jupyter"},
    {include-group = "style"},
    {include-group = "test"},
]
doc = [
    "myst-nb",
    "sphinx",
    "sphinx-api-relink",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-copybutton",
    "sphinx-thebe",
    "sphinx-togglebutton",
]
jupyter = [
    "jupyterlab",
    "jupyterlab-code-formatter",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
]
style = [
    "mypy",
    {include-group = "types"},
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-profiling",
    "pytest-xdist",
]
types = [
    "pytest",
    "sphinx-api-relink",
]

[tool.setuptools]
include-package-data = false
package-dir = {"" = "src"}

[tool.setuptools.package-data]
boostcfg = ["py.typed"]
pawian = [
    "py.typed",
    "samples/*",
]

[tool.setuptools.packages.find]
namespaces = false
where = ["src"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_scheme = "only-version"
write_to = "src/pawian/version.py"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
branch = true
omit = ["version.py"]
source = ["src"]

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = "_build"
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["tests.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["awkward.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["matplotlib.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["pandas.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["uproot.*"]

[tool.pyright]
exclude = [
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv/",
    "**/__pycache__",
    "**/_build",
]
reportArgumentType = false
reportAttributeAccessIssue = false
reportGeneralTypeIssues = false
reportIndexIssue = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportReturnType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = true
reportUnnecessaryIsInstance = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"
venv = ".venv"
venvPath = "."

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations=3",
    "--ignore=docs/conf.py",
    "-m not slow",
]
filterwarnings = [
    "error",
    "ignore:.*Consider switching from .* to .*:DeprecationWarning",
    "ignore:.*__array__ implementation doesn't accept a copy keyword*:DeprecationWarning",
    "ignore:DataFrame.groupby with axis=1 is deprecated.*:FutureWarning",
    "ignore:Using the level keyword in DataFrame and Series aggregations is deprecated.*:FutureWarning",
    "ignore:datetime.datetime.utcfromtimestamp\\(\\) is deprecated and scheduled for removal in a future version.*:DeprecationWarning",
    "ignore:the imp module is deprecated in favour of importlib.*:DeprecationWarning",
]
markers = [
    "serial",
    "slow: marks tests as slow (select with '-m slow')",
]
norecursedirs = [
    ".ipynb_checkpoints",
    "_build",
]
testpaths = [
    "src",
    "tests",
]

[tool.ruff]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true
src = [
    "src",
    "tests",
]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT00",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "PLW1514",
    "PT001",
    "PTH",
    "SIM108",
    "UP036",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "ANN",
    "B018",
    "C90",
    "D",
    "E303",
    "E402",
    "E703",
    "N806",
    "N816",
    "PLR09",
    "PLR2004",
    "PLW0602",
    "PLW0603",
    "S101",
    "T20",
    "TC00",
]
"docs/*" = [
    "E402",
    "INP001",
    "S101",
    "S113",
    "T201",
]
"docs/conf.py" = [
    "A001",
    "D100",
    "PLW2901",
]
"setup.py" = ["D100"]
"tests/*" = [
    "ANN",
    "D",
    "INP001",
    "PGH001",
    "PLC2701",
    "PLR0913",
    "PLR0917",
    "PLR2004",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
    "tool.tox.env_run_base",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
env_list = [
    "cov",
    "docnb-force",
    "linkcheck",
    "sty",
]
no_package = true
requires = ["tox>=4.21.0"]
skip_install = true
skip_missing_interpreters = true

[tool.tox.env_run_base]
allowlist_externals = ["pytest"]
commands = [["pytest", {replace = "posargs", extend = true}]]
description = "Run all fast unit tests"
pass_env = ["*"]

[tool.tox.env.cov]
allowlist_externals = ["pytest"]
commands = [
    [
        "pytest",
        {replace = "posargs", extend = true},
        "--cov-fail-under=85",
        "--cov-report=html",
        "--cov-report=xml",
        "--cov=boostcfg",
        "--cov=pawian",
    ],
]
description = "Compute the test coverage of all unit tests"

[tool.tox.env.doc]
allowlist_externals = ["sphinx-build"]
commands = [
    [
        "sphinx-build",
        "--builder=html",
        "--fail-on-warning",
        "--keep-going",
        "--show-traceback",
        "docs/",
        "docs/_build/html",
    ],
]
description = "Build documentation and API through Sphinx"

[tool.tox.env.doclive]
allowlist_externals = ["sphinx-autobuild"]
commands = [
    [
        "sphinx-autobuild",
        "--ignore=docs/_build",
        "--ignore=docs/api",
        "--open-browser",
        "--port=0",
        "--re-ignore=docs/.*\\.inv",
        "--watch=docs",
        "--watch=src",
        "docs/",
        "docs/_build/html",
    ],
]
description = "Set up a server to preview changes to the HTML pages live"

[tool.tox.env.docnb]
base = ["tool.tox.env.doc", "tool.tox.env_run_base"]
description = "{[tool.tox.env.doc]description} with cached notebook execution"
set_env.EXECUTE_NB = ""

[tool.tox.env.docnb-force]
base = ["tool.tox.env.doc", "tool.tox.env_run_base"]
description = "{[tool.tox.env.doc]description} with notebook execution (no cache)"
set_env.FORCE_EXECUTE_NB = "yes"

[tool.tox.env.docnblive]
base = ["tool.tox.env.doclive", "tool.tox.env_run_base"]
description = "{[tool.tox.env.doclive]description} with cached notebook execution"
set_env.EXECUTE_NB = "yes"

[tool.tox.env.linkcheck]
allowlist_externals = ["sphinx-build"]
commands = [
    [
        "sphinx-build",
        "--builder=linkcheck",
        "--show-traceback",
        "docs/",
        "docs/_build/linkcheck",
    ],
]
description = "Check external links in the documentation (requires internet connection)"

[tool.tox.env.nb]
allowlist_externals = ["pytest"]
commands = [["pytest", "--nbmake", "{posargs:docs}"]]
description = "Run all notebooks with pytest"

[tool.tox.env.sty]
allowlist_externals = ["pre-commit"]
commands = [["pre-commit", "run", "--all-files", {replace = "posargs", extend = true}]]
description = "Perform all linting, formatting, and spelling checks"

[tool.uv]
constraint-dependencies = [
    "pygments!=2.19.*", # https://github.com/felix-hilden/sphinx-codeautolink/issues/152
    "sphinx-codeautolink!=0.16.0",
]
